RNA-Seq Pipeline
1. Sequence reads
2. Quality control - FASTQC
3. Trimming - Trimgalore to remove artifacts and adapter sequences -> trimmed fastq files
4. Alignment to genome - STAR aligner with optimised settings -> BAM files
5. Quantification of gene abundances - rsem for read counting -> gene abundance tab files
6. Downstream analysis
    - Data wrangling to assemble all samples into one gene expression matrix (R)
    - Differential expression analysis (R package DESeq2)
    - Gene Set Enrichment Analysis (R packages fgsea and clusterProfiler)

FASTQ file
    1. A sequence identifier with information about the sequencing run and the cluster. The exact contents of this line vary by based on the BCL to FASTQ conversion software used.
    2. The sequence (the base calls; A, C, T, G and N).
    3. A separator, which is simply a plus (+) sign.
    4. The base call quality scores. These are Phred +33 encoded, using ASCII characters to represent the numerical quality scores.
QC fastq file - fastqc module
Quality and adapter trimming using trimgalore
    trim_galore --paired --illumina --dont_gzip --fastqc_args "-o destination_folder_fastQC"  -o destination_folder_fastQs read1.fastq.gz read2.fastq.gz
STAR alignment - Running STAR alignment for 150bp paired-end reads on GRCh38
    Generating Genome Indices for STAR
    This step generates genome indices using the genome FASTA file as input. 
    Genome indices are required for all types of mapping jobs. 
    This step needs to be performed only once for each genome assembly. 
    The resulting files can be re-used for mapping different samples to the same genome
    STAR can be run without the annotation file but it is strongly recommended to use it when available. Always best to match the source of FASTA file and the .gtf. For example, if you downloaded FASTA from Ensembl it is good practice to download the GTF from Ensembl too. Otherwise you may encounter incompatibilities between the two e.g. on the way chromosomes are named, it can be chr1, chr2 in some … or 1,2,3 etc. in other.
    STAR outputs bam files and various mapping metrics
        - Aligned.toTranscriptome.out.bam = transcriptomic co-ordinates = used for read counting step using rsem-count
        - Aligned.sortedByCoord.out.bam = classic bam file that can be used in other pipelines downstream e.g. htseq etc
        - final.out = evaluate mapping performance and quality of RNASeq
Quantification of gene abundance using rsem
    rsem-calculate-expression
        --paired-end –strandness reverse options are applicable to paired stranded RNA-seq data such as Illumina stranded Tru-seq protocol
        -p 2 defines the number of threads used by RSEM
    rsem-prepare-reference
    output
        contain the expression estimates at gene and isoform level
        tsm - gene_id, transcript_id(s), length, effective_length, expected_count, TPM, FPKM
        TPM = transcripts per million
        FPKM = fragments per kilobase of transcript per million fragments mapped

DE analysis workflow using DESeq2
1. Read counts matrix + Experimental design matrix -> Create DESeq2Dataset object.filter out low count genes, run DESeq2Dataset
2. Count Normalisation -> Transform counts (vst, rlog)
3. Unsupervised clustering -> plot PCA, HCA
4. Fit GLM model -> Get DESeq2 DE results
5. Check fit of dispersion estimates -> Plot dispersion estimates
6. Save DE results tables into .txt/.csv files -> Also save transformed counts into .txt/.csv
7. Graphical visualisation of the DE results -> MA plot, volcano, heatmap

DESeq2
    BiocManager::install("DESeq2")
    library("DESeq2")
Input data
    read.delim() - Read Counts & Sample Groups
Create DESeq2 object
    dds <- DESeqDataSetFromMatrix(countData, colData, design = group)
Filtering out low count genes
    keep <- rowSums(counts(dds) >= 10) >= 3
    dds(keep,)
Run DESeq algorithm
    dds <- DESeq(dds)
Data Normalisation
    The total number of reads (library size) in each sample slightly varies. We need to take this into account to be able to accurately compare gene expression between samples. For this reason we need to normalize the data to library size. 
    There are many methods of data normalization e.g. DESeq2's median of ratios, CPM (counts per million), TPM (transcripts per kilobase million), RPKM/FPKM (reads/fragments per kilobase of exon per million reads/fragments mapped). 
    DESeq2's median of ratios = counts divided by sample-specific size factors determined by median ratio of gene counts relative to geometric mean per gene.
    counts(dds, normalized=TRUE)
Data transformation
    In order to test for differential expression, DESeq2 operates on raw counts inside the Generalized Linear Model. However, for downstream analyses – e.g. for visualization or clustering – it is useful to work with transformed versions of the count data. 
    DESeq2 provides two methods for data transformation:
        - variance stabilizing transformations (VST) which produces transformed data on the log2 scale, normalized with respect to library size
        - regularized logarithm (rlog), which incorporates a prior on the sample differences and produces transformed data on the log2 scale normalized with respect to other normalization factors.
    vsd <- vst(dds, blind=FALSE)
Unsupervised clustering
    Hierarchical clustering (dendrogram)
        Hierarchical clustering is a method for cluster analysis where we seek to identify clusters of samples in an unsupervised manner. This is useful for visualizing the effects of the experiment or potential problems in the data such as batch effects. We apply the ‘dist’ function to the transpose of the transformed count matrix to get sample-to-sample distances and then we apply clustering with ‘hclust’, which we then plot.
        sampleDists <- dist(t(assay(vsd)))
        plot(hclust(sampleDists, method="complete"))
    PCA Plot
        Principal Component Analysis (PCA) plot summarises the data in 2D , plotting their first two principal components. Similar to hierarchical clustering this is useful for visualizing sample grouping in an unsupervised manner.
        plotPCA(vsd, intgroup=c("group"))
Getting the results of differential expression analysis
    run DE analysis - res <- results(dds, contrast=c("group", "chemo_sensitive", "chemo_resistant"))
    export results to .csv file
    What happens when running the DE analysis
        Count data is modelled using the negative binomial distribution. 
        - estimates size factors
        - estimates dispersions
        - computes gene-wise dispersion estimates
        - finds mean-dispersion relationship
        - final dispersion estimates
        - fitting model (the Generalized Linear Model) and testing
        DESeq2 doesn't actually use normalized counts, rather it uses the raw counts and models the normalization inside the Generalized Linear Model (GLM). These normalized counts are useful for downstream visualization of results but cannot be used as input to DESeq2 or any other tools that perform differential expression analysis which use the negative binomial model.
    Plot Dispersion Estimates
        Plotting the dispersion estimates is a useful diagnostic to observe how well the data has been captured by the model. Our data produced the typical shape of the dispersion plot, showing the final estimates shrunk from the gene-wise estimates towards the fitted estimates. Some gene-wise estimates are flagged as outliers and not shrunk towards the fitted value.
        plotDispEsts(dds)
        plotMA shows the log2 fold changes of the genes (each dot is a gene) over the mean of normalized counts for all samples in our data.
        plotMA(res)
Graphical Visualizations of the DE genes
    Volcano plot
        In a volcano plot we can visualize the Log2Fold changes of all genes (again each dot represents a gene) plotted against the -Log10 Adjusted pvalue. In red are genes with padj < 0.05)
        BiocManager::install("EnhancedVolcano") library(EnhancedVolcano, quite = TRUE)
        EnhancedVolcano(res, lab = rownames(res), x = 'log2FoldChange', y = ‘padj')
    Counts Plot
        It is also useful to examine the counts of reads for a single gene across the groups. plotCounts, produces a simple plot of the normalizes counts grouped by our sample groups. We can specify which gene to plot, here we are specifying to plot the gene which had the smallest adjusted p value from the results table.
        plotCounts(dds, gene=which.res(res$padj), intgroup="group")
    Heatmap
        We can also visualize the differentially expressed genes using a heatmap. We are subseting the DE genes with padj < 0.05 and log2FC > |1| i.e. at least two-fold change in expression. The heatmap is illustrating normalized gene expression, which has been scaled by raw, across the differentially expressed genes in our samples. Columns correspond to samples and rows correspond to genes. Columns and also rows have been clustered by hierarchical clustering (dendrogram).
        install.packages(“pheatmap”) library(pheatmap)
        de.sign <- subset(res, padj < 0.05 & abs(log2FoldChange) >1 )
        de.sign.genes <- rownames(de.sign)
        scale.dat <- t(scale(t(assay(vsd)[de.sign.genes,])))
        pheatmap(scale.dat[de.sign.genes,], cluster_rows=TRUE, show_rownames=FALSE, cluster_cols=TRUE)
    Annotation of output tables 
        It is useful to annotate our differential analysis results tables with Gene Symbols. We can do that using R package AnnotationDbi as shown below. 
        BiocManager::install('AnnotationDbi') library(AnnotationDbi) library(org.Hs.eg.db)
        res.df <- as.data.frame(res)
        res.annot <- mapIds(org.Hs.eg.db, keys = rownames(res.df), keytype = "ENSEMBL", column = "SYMBOL")
        res.df.annot <- cbind(res.df,gene.symbol = res.annot) #binding the annotations to the sign.df
        head(res.df.annot)
        write.csv(res.df.annot, file = "DE_sensitiveVSresistant_results_wGeneSymbol.csv")
    Replot the Volcano using Gene Symbols
        Now that we have annotated the DE results with Gene Symbols lets re-graph the volcano plot labeling the points with Gene Symbols instead of Ensembl IDs. 
        EnhancedVolcano(sigs.df.annot, lab = sigs.df.annot$gene.symbol, x = 'log2FoldChange', y = 'padj')


Gene Set Analysis with clusterProfiler
    From the Differential Expression analysis we can extract thousands of genes that alter in expression between experimental conditions. To help infer the biological processes and pathways that are affected and gain an insight into biological mechanisms a number of methods have been developed. The two most common approaches are :
    Over-representation analysis. This method employs a hypergeometric test to determine whether genes from a predefined set (for example those belonging to the same pathway/biological process) are present more than would be expected by random chance in our gene list of interest (this would be for example the list of significantly upregulated genes in the DESeq2 results, ie genes with an adjusted pvalue < 0.05 and log2 fold-change > 1)  
    Pre-Ranked Gene Set Enrichment Analysis (GSEA Pre-Ranked). This method was originally developed by Subramanian et al. in 2005 (PMID: 16199517). Unlike the overrepresentation test, it does not require to threshold the differential expression matrix with pvalue thresholds. Instead we provide all genes in the data ranked by a metric of differential expression, this is usually the log2 fold-change or the test-statistic. For each pre-defined gene set the method determines whether there is significant enrichment at either end of the ranking. 

Gene set analysis can also be implemented in R through R packages. We are going to use:
clusterProfiler for over-representation analysis
fgsea for pre-ranked gsea

clusterProfiler - install clusterProfiler, msigdbr, dplyr
    Preparing the gene-set collection
        Here we are going to load the C5 collection from MSigDB which corresponds to gene ontologies and then select the gene set name and the corresponding gene symbols into a separate dataframe that we are going to use for the over-representation test.
        go_gene_sets <- msigdbr(species = "human", category = "C5") 
        msigdbr_t2g <- go_gene_sets %>% dplyr::distinct(gs_name,gene_symbol) %>% as.data.frame()
    Preparing our gene-list of interest
        Here we are going to load DESeq2 results with the differential gene expression and then subset the data to obtain the significantly upregulated genes. 
        DE.res <- read.csv("/Users/maniat01/Documents/DE_sensitiveVSresistant_results_wGeneSymbol.csv", header = TRUE, row.names = 1)
        DE.res.sign <- subset(DE.res, padj < 0.05 & log2FoldChange > 1)
        #Let’s check how many they are: nrow(DE.res.sign) 
    Performing the over-representation test
        Now we are going to perform the over-representation test using our gene list of interest (ie the significantly up-regulated genes in sensitive vs resistant cells) and the Gene Ontology collection. 
        enrichRes <- enricher(gene = DE.res.sign$gene.symbol, TERM2GENE = msigdbr_t2g, pvalueCutoff = 0.05, pAdjustMethod = "BH")
        output to csv

GSEA Pre-Ranked
    In Pre-Ranked GSEA we rank the genes in our data by decreasing differential expression metric (log fold-change or test-statistic). The method then looks into whether there is significant enrichment of each gene-set in our collection. We are aiming to get information that when plotted for an example gene-set looks like these.
    Install fgsea, data.table, qusage, ggplot2
    Loading the Gene Ontology Collection
        Firstly, you need to download the gmt file for the collection of your interest from MSigDB, I use the versions of Gene Symbol (https://www.gsea-msigdb.org/gsea/msigdb/human/collections.jsp#H ) and have already downloaded it for you. So, let’s read it in R.
        gmt.file <- read.gmt("gsea/c5.go.bp.v7.4.symbols.gmt")
    Ranking our gene list
        Now we need to rank our DE results by decresing Log2 Fold-change and then we need to create a named vector of the log2 fold changes with the names being the gene symbols.
        DE.res.ranked <- DE.res[order(DE.res$log2FoldChange, decreasing = T), ]
        DE.ranks <- setNames(DE.res.ranked$log2FoldChange, DE.res.ranked$gene.symbol)
    Running the fgsea function
        fgseaRes <- fgsea(gmt.file, DE.ranks, minSize=15, maxSize=500)
        fwrite(fgseaRes, file = "PrerankedGSEA_gobp_sensitiveVSresistant.txt", sep = "\t", sep2=c("", " ", ""))
    Enrichment Plot
        Finally, lets look into the significantly enriched pathways and make an enrichment plot for one with a positive enrichment score and one with a negative
        topPathways <- fgseaRes[order(padj)][padj <= 0.05]$pathway
        EnPlot <- plotEnrichment(gmt.file[["GOBP_EPITHELIUM_DEVELOPMENT"]],DE.ranks) + labs(title="GOBP_EPITHELIUM_DEVELOPMENT") + theme(text = element_text(size=20))
        EnPlot2 <- plotEnrichment(gmt.file[["GOBP_DEFENSE_RESPONSE_TO_VIRUS"]],DE.ranks) + labs(title="GOBP_DEFENSE_RESPONSE_TO_VIRUS") + theme(text = element_text(size=20))



