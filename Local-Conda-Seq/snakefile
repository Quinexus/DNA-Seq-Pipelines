configfile: "config.yaml"

rule all:
    input:
        "QC/multiqc_report.html",
        expand("VCF/{prefix}.annotated.vcf.gz", prefix=config['prefix']),

rule index_reference:
    input:
        reference=config['reference'],
        feature_file=config['known_variants']
    shell:
        """
        bwa index {input.reference}
        samtools faidx {input.reference}
        gatk CreateSequenceDictionary -R {input.reference}
        gatk IndexFeatureFile -I {index.features_file}
        """

rule quality_control:
    input:
        read1=config['reads']['r1'],
        read2=config['reads']['r2']
    params:
        threads=config['threads']
    output:
        "QC/multiqc_report.html"
    shell:
        """
        fastqc {input.read1} {input.read2} -o QC/ -t {params.threads}
        multiqc QC/ -o QC
        """

rule align_reads:
    input:
        read1=config['reads']['r1'],
        read2=config['reads']['r2'],
        reference=config['reference']
    params:
        prefix=config['prefix']
    output:
        "Alignment/{prefix}.aligned.bam"
    shell:
        """
        bwa mem \
        -R "@RG\\tID:{wildcards.prefix}\\tSM:{wildcards.prefix}\\tPL:ILLUMINA\\tLB:{wildcards.prefix}\\tPU:{wildcards.prefix}_unit" \
        {input.reference} \
        {input.read1} \
        {input.read2} |
        samtools sort -o {output} -
    
        samtools index {output}
        """

rule mark_duplicates:
    input:
        "Alignment/{prefix}.aligned.bam"
    params:
        ram=config['ram_usage']
    output:
        marked_bam="Alignment/{prefix}.marked.bam",
        marked_file="QC/{prefix}.marked"
    shell:
        """
        gatk --java-options "-Xmx{params.ram}G" MarkDuplicates \
            -I {input} \
            -M {output.marked_file} \
            -O {output.marked_bam}
        """

rule base_score_quality_recalibration:
    input: 
        marked_bam="Alignment/{prefix}.marked.bam",
        reference=config['reference'],
        known_variants=config['known_variants']
    params:
        ram=config['ram_usage']
    output:
        recalib_table="Alignment/{prefix}.table",
        recalib_bam="Alignment/{prefix}.recalib.bam"
    shell:
        """
        gatk --java-options "-Xmx{params.ram}G" BaseRecalibrator \
            -I {input.marked_bam} \
            -R {input.reference} \
            --known-sites {input.known_variants} \
            -O {output.recalib_table}
        
        gatk --java-options "-Xmx{params.ram}G" ApplyBQSR \
            -R {input.reference} \
            -I {input.marked_bam} \
            --bqsr-recal-file {output.recalib_table} \
            -O {output.recalib_bam}
        """

rule variant_calling:
    input:
        reference=config['reference'],
        recalib_bam="Alignment/{prefix}.recalib.bam"
    params:
        ram=config['ram_usage']
    output:
        raw_vcf="VCF/{prefix}.raw.vcf.gz",
        filtered_vcf="VCF/{prefix}.filtered.vcf.gz"
    shell:
        """
        gatk --java-options "-Xmx{params.ram}G" Mutect2 \
            -R {input.reference} \
            -I {input.recalib_bam} \
            -O {output.raw_vcf}
        
        gatk --java-options "-Xmx{params.ram}G" FilterMutectCalls \
            -R {input.reference} \
            -V {output.raw_vcf} \
            -O {output.filtered_vcf}
        """

rule annotate_variants:
    input:
        "VCF/{prefix}.filtered.vcf.gz"
    params:
        threads=config['threads'],
        genome="GRCh38.105"
    output:
        "VCF/{prefix}.annotated.vcf.gz"
        "snpEff_genes.txt"
    shell:
        """
        snpEff -Xmx8g -v {params.genome} {input} > {output}
        """

