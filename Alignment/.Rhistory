cont.matrix <- makeContrasts(TumourvsNormal=Tumour-Normal, levels=mod)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
topTable(fit2, adjust="BH")
tt <- topTable(fit2, adjust="BH", n=Inf)
dim(tt)
head(tt) ### tt contains the GSVA limma differential expression stats for all the KEGG pathways
write.table(tt, file="GSVA_KEGG_tumourvsnormal.txt", quote=F, sep="\t", row.names=T)
DEpwys <- rownames(tt)[tt$adj.P.Val <= 0.01]
length(DEpwys)
plot(tt$logFC, -log10(tt$P.Value), pch=".", cex=4, col=grey(0.75),
main="", xlab="GSVA enrichment score difference", ylab=expression(-log[10]~~Raw~P-value))
abline(h=-log10(max(tt$P.Value[tt$adj.P.Val <= 0.01])), col=grey(0.5), lwd=1, lty=2)
points(tt$logFC[match(DEpwys, rownames(tt))],
-log10(tt$P.Value[match(DEpwys, rownames(tt))]), pch=".", cex=5, col="darkred")
text(max(tt$logFC)*0.85, -log10(max(tt$P.Value[tt$adj.P.Val <= 0.01])), "1% FDR", pos=3)
DEpwys_es <- brca_es[match(DEpwys, rownames(brca_es)), ] ### extract the GSVA values for significantly differential expressed KEGG pathways
## we assigned different colour to Tumour and Normal group
colorLegend <- c("darkred", "darkblue")
names(colorLegend) <- c("Tumour", "Normal")
sample.color.map <- colorLegend[group]
names(sample.color.map) <- colnames(DEpwys_es)
### cluster samples and pathways based on the spearman's correlation
sampleClustering <- hclust(as.dist(1-cor(DEpwys_es, method="spearman")),
method="complete")
geneSetClustering <- hclust(as.dist(1-cor(t(DEpwys_es), method="pearson")),
method="complete")
### now produce heatmap
heatmap(DEpwys_es, ColSideColors=cancer_types_all.color, xlab="samples",
ylab="Pathways", margins=c(2, 20),
labCol="", scale="row", Colv=as.dendrogram(sampleClustering),
Rowv=as.dendrogram(geneSetClustering))
legend("topleft", names(colorLegend), fill=colorLegend, inset=0.01, bg="white")
install.packages("devtools")
library(devtools)
devtools::install_github('dviraran/xCell')
library(xCell)
devtools::install_github("GfellerLab/EPIC", build_vignettes=TRUE)
library(EPIC)
install.packages("curl") ##Installs the MCPcounter dependancy 'curl'
install_github("ebecht/MCPcounter",ref="master", subdir="Source")
library(MCPcounter)
devtools::install_github('BioInforCore-BCI/Decosus')
library(Decosus)
exp_data <- read.table(file="exp_data_BRCA_10_tumour_normal_pairs.txt", header=T, sep="\t", row.names=1)
install.packages("devtools")
dim(exp_data)
head(exp_data)
boxplot(exp_data)
library(xCell)
est_xCell <- xCellAnalysis(exp_data)
install.packages("curl")
dim(est_xCell)
heatmap(est_xCell)
heatmap(est_xCell, col=colorRampPalette(c("blue","white","red"))(100))
library(gplots)
hc <- hclust(as.dist(1-cor(est_xCell, method = "spearman")), method = "ward.D")
hr <- hclust(as.dist(1-cor(t(est_xCell), method="pearson")), method = "average")
group <- c("Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal")
vec.cancer_types <- c("blue", "brown")
cancer_types_all <- group
f.cancer_types_all <- factor(cancer_types_all)
cancer_types_all.color <- rep(0, length(f.cancer_types_all))
for(i in 1:length(f.cancer_types_all))
cancer_types_all.color[i] <- vec.cancer_types[f.cancer_types_all[i] == levels(f.cancer_types_all)]
cancer_types_all.color
heatmap.2(as.matrix(est_xCell))
heatmap.2(as.matrix(est_xCell), Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=bluered(75), scale="row", trace="none")
## set figure margins
par(mar=c(1, 1, 1, 1))
heatmap.2(as.matrix(est_xCell), Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=bluered(75), scale="row", ColSideColors=cancer_types_all.color,key=TRUE,keysize=1, trace="none", density.info=c("none"), margins=c(11, 17))
install.packages("devtools")
library(devtools)
devtools::install_github('dviraran/xCell')
library(xCell)
devtools::install_github("GfellerLab/EPIC", build_vignettes=TRUE)
library(EPIC)
install.packages("curl") ##Installs the MCPcounter dependancy 'curl'
install_github("ebecht/MCPcounter",ref="master", subdir="Source")
library(MCPcounter)
devtools::install_github('BioInforCore-BCI/Decosus')
library(Decosus)
exp_data <- read.table(file="exp_data_BRCA_10_tumour_normal_pairs.txt", header=T, sep="\t", row.names=1)
dim(exp_data)
head(exp_data)
boxplot(exp_data)
library(xCell)
est_xCell <- xCellAnalysis(exp_data)
dim(est_xCell)
heatmap(est_xCell)
heatmap(est_xCell, col=colorRampPalette(c("blue","white","red"))(100))
library(gplots)
hc <- hclust(as.dist(1-cor(est_xCell, method = "spearman")), method = "ward.D")
hr <- hclust(as.dist(1-cor(t(est_xCell), method="pearson")), method = "average")
group <- c("Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal")
vec.cancer_types <- c("blue", "brown")
cancer_types_all <- group
f.cancer_types_all <- factor(cancer_types_all)
cancer_types_all.color <- rep(0, length(f.cancer_types_all))
for(i in 1:length(f.cancer_types_all))
cancer_types_all.color[i] <- vec.cancer_types[f.cancer_types_all[i] == levels(f.cancer_types_all)]
cancer_types_all.color
heatmap.2(as.matrix(est_xCell))
heatmap.2(as.matrix(est_xCell), Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=bluered(75), scale="row", trace="none")
## set figure margins
par(mar=c(1, 1, 1, 1))
# heatmap.2(as.matrix(est_xCell), Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=bluered(75), scale="row", ColSideColors=cancer_types_all.color,key=TRUE,keysize=1, trace="none", density.info=c("none"), margins=c(11, 17))
# legend("right",legend=levels(f.cancer_types_all),fill=c("blue", "brown"),title="Groups", cex=0.8)
#dev.off()  # Reset graphics device
#par(mar=c(2, 2, 2, 2))  # Set reasonable margins
png("heatmap.png", width=1200, height=1000, res=150)
heatmap.2(as.matrix(est_xCell), Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc),
col=bluered(75), scale="row", ColSideColors=cancer_types_all.color,
key=TRUE, keysize=1, trace="none", density.info="none", margins=c(10, 17))
legend("right", legend=levels(f.cancer_types_all), fill=c("blue", "brown"), title="Groups", cex=0.8)
dev.off()
library(EPIC)
exp_data_unlog <- 2^exp_data
out <- EPIC(bulk = exp_data_unlog) ## out is a list of 3
est_EPIC_mRNAProp <- t(out$mRNAProportions)
est_EPIC_cellProp <- t(out$cellFractions)
dim(est_EPIC_mRNAProp)
dim(est_EPIC_cellProp)
sum(est_EPIC_mRNAProp[,1])
sum(est_EPIC_mRNAProp[,2])
sum(est_EPIC_cellProp[,1])
sum(est_EPIC_cellProp[,2])
heatmap(est_EPIC_mRNAProp)
heatmap(est_EPIC_mRNAProp, col=colorRampPalette(c("blue","white","red"))(100))
heatmap(est_EPIC_cellProp)
heatmap(est_EPIC_cellProp, col=colorRampPalette(c("blue","white","red"))(100))
library(MCPcounter)
est_MCPcounter <- MCPcounter.estimate(exp_data,featuresType="HUGO_symbols")
install.packages("curl")
dim(est_MCPcounter)
install.packages("devtools")
head(est_MCPcounter)
heatmap(as.matrix(est_MCPcounter),col=colorRampPalette(c("blue","white","red"))(100))
hc <- hclust(as.dist(1-cor(est_MCPcounter, method = "spearman")), method = "ward.D")
hr <- hclust(as.dist(1-cor(t(est_MCPcounter), method="pearson")), method = "average")
heatmap.2(as.matrix(est_MCPcounter), Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=bluered(75), scale="row", trace="none", margins=c(8,16))
library(Decosus)
exp_data_unlog1 <- exp_data_unlog
exp_data_unlog1$hgnc_symbols <- rownames(exp_data_unlog)
est_Decosus <- Decosus::cosDeco(x = exp_data_unlog1, rnaseq=T, plot=TRUE)
est_Decosus_samples <- est_Decosus$main_samples
est_Decosus_cells <- est_Decosus$main_cells
est_Decosus_cells <- est_Decosus_cells[-2, ]
dim(est_Decosus_cells)
heatmap(as.matrix(est_Decosus_cells),col=colorRampPalette(c("blue","white","red"))(100))
hc <- hclust(as.dist(1-cor(est_Decosus_cells, method = "spearman")), method = "ward.D")
hr <- hclust(as.dist(1-cor(t(est_Decosus_cells), method="pearson")), method = "average")
heatmap.2(as.matrix(est_Decosus_cells), Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=bluered(75), scale="row", trace="none", margins=c(6,12))
est_B_xCell <- est_xCell[which(rownames(est_xCell) == "B-cells"),]
est_B_EPICcell <- est_EPIC_cellProp[which(rownames(est_EPIC_cellProp) == "Bcells"),]
est_B_MCPcounter <- est_MCPcounter[which(rownames(est_MCPcounter) == "B lineage"),]
est_B_Decosus <- est_Decosus_cells[which(rownames(est_Decosus_cells) == "B cell_consensus"),]
plot(est_B_xCell, est_B_EPICcell, xlab="B xCell", ylab="B EPIC")
plot(est_B_EPICcell, est_B_MCPcounter, xlab="B EPIC", ylab="B MCPcounter")
plot(est_B_EPICcell, as.numeric(est_B_Decosus), xlab="B EPIC", ylab="B Decosus")
plot(as.numeric(est_B_Decosus), est_B_MCPcounter, xlab="B Decosus", ylab="B MCPcounter")
cor.test(est_B_EPICcell, est_B_MCPcounter)
cor.test(est_B_EPICcell, as.numeric(est_B_Decosus))
cor.test(as.numeric(est_B_Decosus), est_B_MCPcounter)
est_cd8T_xCell <- est_xCell[which(rownames(est_xCell) == "CD8+ T-cells"),]
est_cd8T_EPICcell <- est_EPIC_cellProp[which(rownames(est_EPIC_cellProp) == "CD8_Tcells"),]
est_cd8T_MCPcounter <- est_MCPcounter[which(rownames(est_MCPcounter) == "CD8 T cells"),]
est_cd8T_Decosus <- est_Decosus_cells[which(rownames(est_Decosus_cells) == "T cell CD8+_consensus"),]
plot(est_cd8T_xCell, est_cd8T_EPICcell, xlab="CD8+_T xCell", ylab="CD8+_T EPIC")
plot(est_cd8T_EPICcell, est_cd8T_MCPcounter, xlab="CD8+_T EPIC", ylab="CD8+_T MCPcounter")
plot(est_cd8T_EPICcell, as.numeric(est_cd8T_Decosus), xlab="CD8+_T EPIC", ylab="CD8+_T Decosus")
plot(as.numeric(est_cd8T_Decosus), est_cd8T_MCPcounter, xlab="CD8+_T Decosus", ylab="CD8+_T MCPcounter")
cor.test(est_cd8T_EPICcell, est_cd8T_MCPcounter)
cor.test(est_cd8T_EPICcell, as.numeric(est_cd8T_Decosus))
cor.test(as.numeric(est_cd8T_Decosus), est_cd8T_MCPcounter)
install.packages("remotes")
remotes::install_github("omnideconv/immunedeconv")
library("immunedeconv")
est_quantiseq <- immunedeconv::deconvolute(exp_data, "quantiseq")
install.packages("remotes")
head(est_quantiseq)
est_quantiseq_df <- as.data.frame(est_quantiseq)
est_quantiseq <- est_quantiseq_df[,c(2:21)]
rownames(est_quantiseq) <- est_quantiseq_df[,1]
heatmap(as.matrix(est_quantiseq),col=colorRampPalette(c("blue","white","red"))(100))
type <- c("brca","brca","brca","brca","brca","brca","brca","brca","brca","brca","brca","brca","brca","brca","brca","brca","brca","brca","brca","brca")
est_timer<-immunedeconv::deconvolute(exp_data, "timer", indications = type)
head(est_timer)
est_timer_df <- as.data.frame(est_timer)
est_timer <- est_timer_df[,c(2:21)]
rownames(est_timer) <- est_timer_df[,1]
heatmap(as.matrix(est_timer),col=colorRampPalette(c("blue","white","red"))(100))
### use immunodeconv to run consensus_tme
est_consensus_tme <- immunedeconv::deconvolute(exp_data, "consensus_tme", indications = type)
wilcox_stat <- vector()
for(i in 1:length(rownames(est_timer))) {
temp <- wilcox.test(as.numeric(est_timer[i, c(1:10)]), as.numeric(est_timer[i, c(11:20)]))
wilcox_stat[i] <- temp$p.value
}
names(wilcox_stat) <- rownames(est_timer)
wilcox_stat
boxplot(as.numeric(est_timer[3, c(1:10)]), as.numeric(est_timer[3, c(11:20)]), names=c("Tumour", "Normal"), ylab="T cell CD8+")
boxplot(as.numeric(est_timer[4, c(1:10)]), as.numeric(est_timer[4, c(11:20)]), names=c("Tumour", "Normal"), ylab="Neutrophil")
boxplot(as.numeric(est_timer[5, c(1:10)]), as.numeric(est_timer[5, c(11:20)]), names=c("Tumour", "Normal"), ylab="Macrophage")
#est_quantiseq_df <- as.data.frame(est_quantiseq)
#est_quantiseq <- est_quantiseq_df[,c(2:21)]
#rownames(est_quantiseq) <- est_quantiseq_df[,1]
est_B_quantiseq <- est_quantiseq[which(rownames(est_quantiseq) == "B cell"),]
est_B_timer <- est_timer[which(rownames(est_timer) == "B cell"),]
est_cd8T_quantiseq <- est_quantiseq[which(rownames(est_quantiseq) == "T cell CD8+"),]
est_cd8T_timer <- est_timer[which(rownames(est_timer) == "T cell CD8+"),]
plot(as.numeric(est_B_quantiseq), as.numeric(est_B_timer), xlab="B quantiseq", ylab="B Timer")
plot(as.numeric(est_B_Decosus), as.numeric(est_B_quantiseq), xlab="B Decosus", ylab="B quantiseq")
plot(as.numeric(est_B_Decosus), as.numeric(est_B_timer), xlab="B Decosus", ylab="B Timer")
cor.test(as.numeric(est_B_quantiseq), as.numeric(est_B_timer))
cor.test(as.numeric(est_B_Decosus), as.numeric(est_B_quantiseq))
cor.test(as.numeric(est_B_Decosus), as.numeric(est_B_timer))
plot(as.numeric(est_cd8T_quantiseq), as.numeric(est_cd8T_timer), xlab="CD8+_T quantiseq", ylab="CD8+_T Timer")
plot(as.numeric(est_cd8T_Decosus), as.numeric(est_cd8T_quantiseq), xlab="CD8+_T Decosus", ylab="CD8+_T quantiseq")
plot(as.numeric(est_cd8T_Decosus), as.numeric(est_cd8T_timer), xlab="CD8+_T Decosus", ylab="CD8+_T Timer")
cor.test(as.numeric(est_cd8T_quantiseq), as.numeric(est_cd8T_timer))
cor.test(as.numeric(est_cd8T_Decosus), as.numeric(est_cd8T_quantiseq))
cor.test(as.numeric(est_cd8T_Decosus), as.numeric(est_cd8T_timer))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GSVA")
BiocManager::install("GSEABase")
BiocManager::install("limma")
library(GSVA)
library(GSEABase)
#### Download the Msigdb gene set C2 V KEGG from qmplus page, or from Msigdb's own website (https://www.gsea-msigdb.org/gsea/msigdb)
c2kegg <- getGmt("c2.cp.kegg.v2022.1.Hs.symbols.gmt", collectionType=BroadCollection(category="c2"), geneIdType=SymbolIdentifier())
### now run gsva main function against c2kegg geneset to calculate kegg pathway activity for each sample
brca_par <- gsvaParam(as.matrix(exp_data), c2kegg, minSize = 20, maxSize = 500)
brca_es <- gsva(brca_par)
library(limma)
group <- c("Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Tumour","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal")
mod <- model.matrix(~ 0+factor(group))
colnames(mod) <- c("Normal", "Tumour")
rownames(mod) <- colnames(exp_data)
fit <- lmFit(brca_es, mod)
cont.matrix <- makeContrasts(TumourvsNormal=Tumour-Normal, levels=mod)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
topTable(fit2, adjust="BH")
tt <- topTable(fit2, adjust="BH", n=Inf)
dim(tt)
head(tt) ### tt contains the GSVA limma differential expression stats for all the KEGG pathways
write.table(tt, file="GSVA_KEGG_tumourvsnormal.txt", quote=F, sep="\t", row.names=T)
DEpwys <- rownames(tt)[tt$adj.P.Val <= 0.01]
length(DEpwys)
plot(tt$logFC, -log10(tt$P.Value), pch=".", cex=4, col=grey(0.75),
main="", xlab="GSVA enrichment score difference", ylab=expression(-log[10]~~Raw~P-value))
abline(h=-log10(max(tt$P.Value[tt$adj.P.Val <= 0.01])), col=grey(0.5), lwd=1, lty=2)
points(tt$logFC[match(DEpwys, rownames(tt))],
-log10(tt$P.Value[match(DEpwys, rownames(tt))]), pch=".", cex=5, col="darkred")
text(max(tt$logFC)*0.85, -log10(max(tt$P.Value[tt$adj.P.Val <= 0.01])), "1% FDR", pos=3)
DEpwys_es <- brca_es[match(DEpwys, rownames(brca_es)), ] ### extract the GSVA values for significantly differential expressed KEGG pathways
## we assigned different colour to Tumour and Normal group
colorLegend <- c("darkred", "darkblue")
names(colorLegend) <- c("Tumour", "Normal")
sample.color.map <- colorLegend[group]
names(sample.color.map) <- colnames(DEpwys_es)
### cluster samples and pathways based on the spearman's correlation
sampleClustering <- hclust(as.dist(1-cor(DEpwys_es, method="spearman")),
method="complete")
geneSetClustering <- hclust(as.dist(1-cor(t(DEpwys_es), method="pearson")),
method="complete")
### now produce heatmap
heatmap(DEpwys_es, ColSideColors=cancer_types_all.color, xlab="samples",
ylab="Pathways", margins=c(2, 20),
labCol="", scale="row", Colv=as.dendrogram(sampleClustering),
Rowv=as.dendrogram(geneSetClustering))
legend("topleft", names(colorLegend), fill=colorLegend, inset=0.01, bg="white")
variants <- read.delim("1M_SRR9336468_variants.tsv", header = TRUE, sep = "\t")
setwd("~/Repos/Omics-Practice/Alignment")
variants <- read.delim("1M_SRR9336468_variants.tsv", header = TRUE, sep = "\t")
head(variants)
# Inspect the data
head(variants)
# Load the data
variants <- read.delim("1M_SRR9336468_variants.tsv", header = TRUE, sep = "\t")
# Inspect the data
head(variants)
# Load the data
variants <- read.delim("1M_SRR9336468_variants_clean.tsv", header = TRUE, sep = "\t")
# Inspect the data
head(variants)
# Analyze the distribution of consequences
table(variants$Consequence)
# Plot the impact of variants
library(ggplot2)
ggplot(variants, aes(x = IMPACT)) +
geom_bar() +
theme_minimal() +
labs(title = "Variant Impact Distribution", x = "Impact", y = "Count")
# Plot the impact of variants
library(ggplot2)
ggplot(variants, aes(x = Impact)) +
geom_bar() +
theme_minimal() +
labs(title = "Variant Impact Distribution", x = "Impact", y = "Count")
View(variants)
# Boxplot for DP by Impact
ggplot(variants, aes(x = Impact, y = DP, fill = Impact)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Sequencing Depth (DP) by Variant Impact",
x = "Impact",
y = "Depth (DP)"
)
# Plot the impact of variants
library(ggplot2)
ggplot(variants, aes(x = Impact)) +
geom_bar() +
theme_minimal() +
labs(title = "Variant Impact Distribution", x = "Impact", y = "Count")
# Heatmap of consequence vs. impact
heatmap_data <- variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
library(tidyverse)
# Heatmap of consequence vs. impact
heatmap_data <- variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
ggplot(heatmap_data, aes(x = Consequence, y = Impact, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
labs(
title = "Heatmap of Consequence vs. Impact",
x = "Consequence Type",
y = "Impact"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Boxplot for DP by Impact
ggplot(variants, aes(x = Impact, y = DP, fill = Impact)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Sequencing Depth (DP) by Variant Impact",
x = "Impact",
y = "Depth (DP)"
)
# Heatmap of consequence vs. impact
heatmap_data <- variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
ggplot(heatmap_data, aes(x = Consequence, y = Impact, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
labs(
title = "Heatmap of Consequence vs. Impact",
x = "Consequence Type",
y = "Impact"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Heatmap of consequence vs. impact
heatmap_data <- variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
ggplot(heatmap_data, aes(x = Consequence, y = MODIFIER, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
labs(
title = "Heatmap of Consequence vs. Impact",
x = "Consequence Type",
y = "Impact"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filter out MODIFIER variants
filtered_variants <- variants %>%
filter(Impact != "MODIFIER")
# Bar plot for filtered impacts
ggplot(filtered_variants, aes(x = Impact)) +
geom_bar(fill = "skyblue") +
theme_minimal() +
labs(
title = "Distribution of Variants with Impact (Excluding MODIFIER)",
x = "Impact",
y = "Count"
)
# Bar plot with log scale for y-axis
ggplot(variants, aes(x = Impact)) +
geom_bar(fill = "lightgreen") +
scale_y_log10() +
theme_minimal() +
labs(
title = "Variant Impact Distribution (Log Scale)",
x = "Impact",
y = "Log(Count)"
)
# Pie chart for proportional variant impact
variants %>%
count(Impact) %>%
mutate(Percentage = n / sum(n) * 100) %>%
ggplot(aes(x = "", y = Percentage, fill = Impact)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(
title = "Proportions of Variant Impact Categories"
) +
scale_fill_brewer(palette = "Set2")
# Stacked bar plot: Consequence by impact
variants %>%
count(Consequence, Impact) %>%
ggplot(aes(x = Impact, y = n, fill = Consequence)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(
title = "Breakdown of Consequences by Impact",
x = "Impact",
y = "Count"
) +
scale_fill_brewer(palette = "Set3")
# Heatmap of consequence vs. impact
heatmap_data <- variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
heatmap_data
# Heatmap of consequence vs. impact
heatmap_data <- variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
variants
variants$Consequence
count(variants$Consequence, variants$Impact)
variants %>%
count(Consequence, Impact)
# Heatmap of consequence vs. impact
heatmap_data <- variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
heatmap_data
# Filter out MODIFIER impacts
filtered_variants <- variants %>%
filter(Impact != "MODIFIER")
# Count occurrences of Consequence and Impact
heatmap_data <- filtered_variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
# Preview heatmap_data
print(heatmap_data)
# Create heatmap
heatmap_long <- heatmap_data %>%
tidyr::gather(key = "Impact", value = "Count", -Consequence)
ggplot(heatmap_long, aes(x = Consequence, y = Impact, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
labs(
title = "Heatmap of Consequence vs. Impact (Excluding MODIFIER)",
x = "Consequence Type",
y = "Impact"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filter out MODIFIER impacts
filtered_variants <- variants %>%
filter(Impact != "MODIFIER")
# Count occurrences of Consequence and Impact
heatmap_data <- filtered_variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
# Convert to long format
heatmap_long <- heatmap_data %>%
tidyr::gather(key = "Impact", value = "Count", -Consequence)
# Debug: Print the data to ensure correctness
print(head(heatmap_long))
# Create heatmap
ggplot(heatmap_long, aes(x = Consequence, y = Impact, fill = Count)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
labs(
title = "Heatmap of Consequence vs. Impact (Excluding MODIFIER)",
x = "Consequence Type",
y = "Impact"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
heatmap(heatmap_long)
heatmap_long
heatmap_data
heatmap(heatmap_data)
heatmap_data %>% rownames_to_column() %% heatmap()
heatmap_data <- heatmap_data %>% rownames_to_column()
heatmap(heatmap_data)
heatmap_data
heatmap_data <- variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
heatmap_data <- heatmap_data %>% column_to_rownames()
heatmap_data <- heatmap_data %>% column_to_rownames()
heatmap_data <- variants %>%
count(Consequence, Impact) %>%
tidyr::spread(key = Impact, value = n, fill = 0)
heatmap_data <- heatmap_data %>% column_to_rownames()
heatmap_data
heatmap_data <- heatmap_data %>% column_to_rownames("Consequence")
heatmap_data
heatmap(heatmap_data)
heatmap(as.matrix(heatmap_data))
heatmap_data
heatmap_data <- variants %>%
count(Consequence, Impact)
heatmap_data
