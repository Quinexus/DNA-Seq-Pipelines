if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
files <- list(
"GSM1574235_H3K27ac.CAPAN1_vs_INPUT.CAPAN1_peaks_hg19_chr12.bed",
"GSM1574242_H3K4me1.CAPAN1_vs_INPUT.CAPAN1_peaks_hg19_chr12.bed",
"GSM1574256_H3K4me3.CAPAN1_vs_INPUT.CAPAN1_peaks_hg19_chr12.bed"
)
files
peak <- readPeakFile(files[[3]], header=F)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
files <- list(
"GSM1574235_H3K27ac.CAPAN1_vs_INPUT.CAPAN1_peaks_hg19_chr12.bed",
"GSM1574242_H3K4me1.CAPAN1_vs_INPUT.CAPAN1_peaks_hg19_chr12.bed",
"GSM1574256_H3K4me3.CAPAN1_vs_INPUT.CAPAN1_peaks_hg19_chr12.bed"
)
files
peak <- readPeakFile(files[[3]], header=F)
peak
covplot(peak, weightCol="V5", chrs="chr12")
txdb19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
## install clusterProfiler package as below if you don’t have it in your computer
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
## first prepare the TSS regions
## expand the region to upstream 3000bp and downstream 3000bp
promoter <- getPromoters(TxDb=txdb19, upstream=3000, downstream=3000)
tagMatrix <- getTagMatrix(peak, windows=promoter)
##Heatmap of ChIP binding to TSS regions
tagHeatmap(tagMatrix)
##Average Profile of ChIP peaks binding to TSS region
plotAvgProf(tagMatrix, xlim=c(-3000, 3000), xlab="Genomic Region (5'->3')", ylab = "Read Count Frequency")
##Confidence interval estimated by bootstrap method
plotAvgProf(tagMatrix, xlim=c(-3000, 3000), conf = 0.95, resample = 1000)
## be mindful if you do this for the whole chromosome, as this resampling to calculate 95% confidence interval will take lots of your computing resources and time.
##Here uses `plotPeakProf2` to do all things in one step.
##Binning method for profile of ChIP peaks
## the ignore_strand is FALSE in default. We put here to emphasize that.
plotPeakProf2(peak = peak, upstream = rel(0.2), downstream = rel(0.2), conf = 0.95, by = "gene", type = "body", nbin = 800, TxDb = txdb19, weightCol = "V5",ignore_strand = F)
## we can also use getBioRegion(), getTagMatrix() and plotPeakProf() to plot in three steps.
genebody <- getBioRegion(TxDb = txdb19, by = "gene", type = "body")
matrix_no_flankextension <- getTagMatrix(peak,windows = genebody, nbin = 800)
plotPeakProf(matrix_no_flankextension,conf = 0.95)
#### you can also use getTagMatrix() and plotPeakProf() to plot in two steps
matrix_actual_extension <- getTagMatrix(peak,windows = genebody, nbin = 800, upstream = 1000,downstream = 1000)
plotPeakProf(matrix_actual_extension,conf = 0.95)
## see the manual to plot against other regions
## Since some annotation may overlap, ChIPseeker adopted the following priority in genomic annotation: Promoter, 5’ UTR, 3’ UTR, Exon, Intron, Downstream, Intergenic
## install Bioconductor R package ("org.Hs.eg.db")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
peakAnno <- annotatePeak(peak, tssRegion=c(-3000, 3000), TxDb=txdb19, annoDb="org.Hs.eg.db")
plotAnnoPie(peakAnno)
## Note that we use H3K4me3 peaks to annotate in the example, and H3K4me3 marks the active promoter regions, this confirms that H3K4me3 marked regions largely reside with promoter regions in this annotation.
## This pie chart is very different from the one in the lecture slides where H3K27ac peaks were used, which marks active enhancer regions.
plotAnnoBar(peakAnno)
## plotDistToTSS to calculate the percentage of binding sites upstream and downstream from the TSS of the nearest genes, and visualize the distribution.
plotDistToTSS(peakAnno,title="Distribution of transcription factor-binding loci\nrelative to TSS")
## again you can see H3K4me3 peaks were largely around promoter regions
names(files) <- c("H3K27ac", "H3K4me1", "H3K4me3")
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
library(clusterProfiler)
promoter <- getPromoters(TxDb=txdb, upstream=3000, downstream=3000)
tagMatrixList <- lapply(files, getTagMatrix, windows=promoter)
## we will compare the peaks among the three files in relation to promoters
## average profile of the 3 bed files against promoters
plotAvgProf(tagMatrixList, xlim=c(-3000, 3000))
plotAvgProf(tagMatrixList, xlim=c(-3000, 3000), conf=0.95,resample=500, facet="row")
### peak heatmap across samples
## you can clear all previous plot using the following command
# dev.off()
tagHeatmap(tagMatrixList)
### Profile of the three ChIP peak files binding to body region
plotPeakProf2(files, upstream = rel(0.2), downstream = rel(0.2), conf = 0.95, by = "gene", type = "body", TxDb = txdb, facet = "row", nbin = 800)
### ChIP peak annotation comparison
peakAnnoList <- lapply(files, annotatePeak, TxDb=txdb, tssRegion=c(-3000, 3000), verbose=FALSE)
## use plotAnnoBar to comparing their genomic annotation.
plotAnnoBar(peakAnnoList)
## plotDistToTSS to compare distance to TSS profiles among ChIPseq data.
plotDistToTSS(peakAnnoList)
## compared annotated genes across the 3 ChIP-seq peak files
genes= lapply(peakAnnoList, function(i) as.data.frame(i)$geneId)
vennplot(genes)
## it is likely your plot looks very thin, so you can clear all previous plots and then re-plot
# dev.off()
vennplot(genes)
### Finally, we can also perform peak overlap enrichment analysis between these three peak files in the practical.## Shuffle genome coordination
p <- GRanges(seqnames="chr12",ranges=IRanges(start=c(1, 100), end=c(50, 130)))
shuffle(p, TxDb=txdb)
enrichPeakOverlap(queryPeak = files[[3]], targetPeak = unlist(files[1:2]), TxDb = txdb, pAdjustMethod = "BH", nShuffle = 50, chainFile = NULL, verbose = FALSE)
## this command compares H3K4me3 peals against H3K27ac and H3K4me1 peaks, and determine if there is a significant overlap between gene annotation
peaks_H3K4me3 <- read.delim("GSM1574256_H3K4me3.CAPAN1_vs_INPUT.CAPAN1_peaks_hg19_chr12.bed", header=F)
## randomly select 10 peaks from the file
set.seed(12345) # Set seed for reproducibility
## Sample rows of data with Base R
data_s1 <- peaks_H3K4me3[sample(1:nrow(peaks_H3K4me3), 10), ]
## Print sampled data
data_s1
## write this into a new BED file, ready for the analysis using MEME suite
write.table(data_s1, file="data_s1_H3K4me3.bed", quote=F, sep="\t", row.names=F, col.names = F)
